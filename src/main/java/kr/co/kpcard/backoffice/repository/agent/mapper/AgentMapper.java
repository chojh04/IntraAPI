package kr.co.kpcard.backoffice.repository.agent.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;

import kr.co.kpcard.backoffice.repository.agent.model.AgentBillingCycle;
import kr.co.kpcard.backoffice.repository.agent.model.AgentBillingHistory;
import kr.co.kpcard.backoffice.repository.agent.model.AgentBillings;
import kr.co.kpcard.backoffice.repository.agent.model.AgentLoginInfo;
import kr.co.kpcard.backoffice.repository.agent.model.AgentMerchant;
import kr.co.kpcard.backoffice.repository.agent.model.AgentService;

@Mapper
public interface AgentMapper {
	public static final String IS_LOGINABLE = "SELECT AGENT_ID "
			+ "		,TO_CHAR(sysdate , 'YYYY-MM-DD HH24:MI:SS') loginTime"
			+ "		,SUBMERCHANT_ID "
			+ "	FROM SUBMERCHANT "
			+ "	WHERE AGENT_ID = #{id} "
			+ "		AND AGENT_PW = #{pwd} "
			+ "		AND DEL_FLAG = 'N' ";
	@Select(IS_LOGINABLE)
	public AgentLoginInfo isLoginable(@Param(value="id") String id, @Param(value="pwd") String pwd );
	
	public static final String GET_SERVICES = "SELECT A.SERVICE_ID "
			+ "		, B.SERVICE_BILLING_ID "
			+ "	FROM SUBMERCHANT_SERVICE A "
			+ "		, SUBMERCHANT_SERVICE_BILLING B "
			+ "	WHERE SUBMERCHANT_ID = #{subMerchantId} "
			+ "		AND A.SERVICE_ID   = B.SERVICE_ID(+) "
			+ "		AND A.TYPE         = 'SVR-0004' "
			+ "		AND A.DEL_FLAG     = 'N' "
			+ "		AND B.DEL_FLAG(+)  = 'N' ";
	@Select(GET_SERVICES)
	public List<AgentService> getServices(@Param(value="subMerchantId") String subMerchantId);
	
	public static final String GET_BILLING_HISTORIES = "SELECT SUBMERCHANT_NM "
			+ "		,SERVICE_ID "
			+ "		,SERVICE_NM "
			+ "		,START_DATE "
			+ "		,END_DATE "
			+ "		,BILLING_DATE "
			+ "		,STATUS "
			+ "		,PAYMENT_CNT "
			+ "		,PAYMENT_SUM "
			+ "		,CANCEL_CNT "
			+ "		,CANCEL_SUM "
			+ "		,PAYMENT_SUM - CANCEL_SUM BILLING_AMOUNT "
			+ "		,ROUND(((PAYMENT_SUM - CANCEL_SUM) * MERCHANT_COMMISION) / 100) AFFILIATE_COMM "
			+ "		,ROUND((((PAYMENT_SUM - CANCEL_SUM) * MERCHANT_COMMISION) / 100) * 0.1) AFFILIATE_VAT "
			+ "		,ROUND(((PAYMENT_SUM - CANCEL_SUM) * MERCHANT_COMMISION) / 100) + ROUND((((PAYMENT_SUM - CANCEL_SUM) * MERCHANT_COMMISION) / 100) * 0.1) AFFILIATE_SUMM "
			+ "		,(PAYMENT_SUM - CANCEL_SUM)  - (ROUND(((PAYMENT_SUM - CANCEL_SUM) * MERCHANT_COMMISION) / 100) + ROUND((((PAYMENT_SUM - CANCEL_SUM) * MERCHANT_COMMISION) / 100) * 0.1)) FINAL_BILLING_AMOUNT "
			+ "	FROM ( "
			+ "		SELECT B.NAME SUBMERCHANT_NM "
			+ "			,A.SERVICE_ID "
			+ "			,C.NAME SERVICE_NM "
			+ "			,#{startDate} START_DATE "
			+ "			,#{endDate} END_DATE "
			+ "			,#{billingDate} BILLING_DATE "
            + "         ,'결제' STATUS "
            + "         ,NVL(SUM(DECODE(A.approval_status , 'PAYT-0001' , 1 , 0))       , 0) PAYMENT_CNT "
            + "         ,NVL(SUM(DECODE(A.approval_status , 'PAYT-0001' , A.amount , 0)), 0) PAYMENT_SUM "
            + "         ,NVL(SUM(DECODE(A.approval_status , 'PAYT-0002' , 1 , 0))       , 0) CANCEL_CNT "     
            + "         ,NVL(SUM(DECODE(A.approval_status , 'PAYT-0002' , A.amount , 0)), 0) CANCEL_SUM "
            + "         ,NVL(A.MERCHANT_COMMISION,0) MERCHANT_COMMISION "
            + "		FROM PAY_APPROVAL A "
            + "         ,SUBMERCHANT B "
            + "         ,SUBMERCHANT_SERVICE C "
            + "         ,SUBMERCHANT_COMMISION D"
            + "			,SUBMERCHANT_SERVICE_BILLING E "
            + "		WHERE A.SUBMERCHANT_ID = B.SUBMERCHANT_ID "
			+ "     	AND A.SUBMERCHANT_ID = C.SUBMERCHANT_ID "
			+ "     	AND A.SERVICE_ID     = C.SERVICE_ID "
			+ "     	AND A.SERVICE_ID     = E.SERVICE_ID "
            + "			AND E.SERVICE_BILLING_ID=D.SERVICE_BILLING_ID"
			+ "     	AND A.SUBMERCHANT_ID = #{subMerchantId} "
			+ "     	AND A.SERVICE_ID     = #{serviceId} "
			+ "     	AND A.DEAL_DT       >= #{startDate} AND A.DEAL_DT <= #{endDate} "
			+ "     	AND A.DEAL_DIVIDER   = 'DAYT-0001' "
			+ "		GROUP BY B.NAME,A.SERVICE_ID,C.NAME,A.MERCHANT_COMMISION "
			+ "	) A ";
	@Select(GET_BILLING_HISTORIES)
	public List<AgentBillingHistory> getBillingHistories(@Param(value="subMerchantId") String subMerchantId, 
			@Param(value="serviceId") String serviceId, @Param(value="startDate") String startDate, 
			@Param(value="endDate") String endDate, @Param(value="billingDate") String billingDate);
	
	public static final String GET_BILLING_CYCLES = "SELECT TO_CHAR(STARTDATE , 'YYYYMMDD') STARTDATE "
			+ " 	,TO_CHAR(ENDDATE , 'YYYYMMDD') ENDDATE "
			+ " 	,TO_CHAR(BILLINGDATE , 'YYYYMMDD') BILLINGDATE "  
			+ "	FROM ( "
            + "		/*월초 정산*/ "
            + "		SELECT STARTDATE "
            + "			,ENDDATE "
            + "			,CASE TO_CHAR(TO_DATE(BILLINGDATE), 'DY') "   
			+ " 			WHEN '토' "
			+ " 			THEN TO_DATE(BILLINGDATE) + 2 "
			+ " 			WHEN '일' "
			+ " 			THEN TO_DATE(BILLINGDATE) + 1 "
			+ " 			ELSE TO_DATE(BILLINGDATE) "
			+ "			END BILLINGDATE "
            + "		FROM ( "
            + "			SELECT ADD_MONTHS(TO_DATE(#{startDate},'YYYYMMDD'), LEVEL -1) STARTDATE "
            + "				,LAST_DAY(ADD_MONTHS(TO_DATE(#{startDate},'YYYYMMDD'), LEVEL -1)) ENDDATE "
            + "				,TO_CHAR(ADD_MONTHS(TO_DATE(#{startDate},'YYYYMMDD'), LEVEL) , 'YYYYMM' ) || "
            + "					( SELECT LPAD(B.BILLING_DT, 2 , '0') BILLING_DT "
            + "					FROM SUBMERCHANT_SERVICE_BILLING A"
            + "					,SUBMERCHANT_COMMISION B"
            + "					WHERE A.SERVICE_ID = #{serviceId} "
            + "					AND A.SERVICE_BILLING_ID=B.SERVICE_BILLING_ID"
            + "					AND A.DEL_FLAG   = 'N' ) BILLINGDATE "
            + "			FROM DUAL "
            + "			WHERE 'BILC-0001' = ( SELECT B.BILLING_DURATION "
            + " 								FROM SUBMERCHANT_SERVICE_BILLING A"
            + "										,SUBMERCHANT_COMMISION B "
            + "								WHERE A.SERVICE_ID = #{serviceId} "
            + "									AND A.SERVICE_BILLING_ID=B.SERVICE_BILLING_ID"
            + "									AND B.BILLING_DT IS NOT NULL "
            + "                                 AND A.DEL_FLAG    = 'N' "
            + " 							) "
            + "			CONNECT BY LEVEL <= CEIL(MONTHS_BETWEEN(TO_DATE(#{endDate},'YYYYMMDD'), TO_DATE(#{startDate},'YYYYMMDD'))) "
            + "		) "
            + "		/*주간정산*/ "
            + "		UNION ALL "
            + "		SELECT CASE WHEN (CASE TO_CHAR(TO_DATE(#{startDate},'YYYYMMDD'), 'DY') " 
            + "								WHEN '월' "
            + "								THEN TO_DATE(#{startDate},'YYYYMMDD') "
			+ " 							WHEN '일' "
			+ " 							THEN TO_DATE(#{startDate},'YYYYMMDD') - 6 "
			+ " 							ELSE TO_DATE(#{startDate},'YYYYMMDD') - (TO_CHAR(TO_DATE(#{startDate},'YYYYMMDD'), 'D')  - 2) "
			+ " 						END  + (LEVEL * 7) - 7 "
			+ " 					)  < TO_DATE(#{startDate},'YYYYMMDD') "
			+ " 				THEN TO_DATE(#{startDate},'YYYYMMDD') "
			+ " 				ELSE (CASE TO_CHAR(TO_DATE(#{startDate},'YYYYMMDD'), 'DY') " 
			+ " 							WHEN '월' "
			+ " 							THEN TO_DATE(#{startDate},'YYYYMMDD') "
			+ " 							WHEN '일' "
			+ " 							THEN TO_DATE(#{startDate},'YYYYMMDD') - 6 "
			+ " 							ELSE TO_DATE(#{startDate},'YYYYMMDD') - (TO_CHAR(TO_DATE(#{startDate},'YYYYMMDD'), 'D')  - 2) "
			+ " 							END  + (LEVEL *7) - 7 "
			+ " 					) "
			+ " 				END STARTDATE "
			+ "			,CASE WHEN CASE TO_CHAR(TO_DATE(#{startDate},'YYYYMMDD'), 'DY') " 
			+ " 					WHEN '월' "
			+ " 					THEN TO_DATE(#{startDate},'YYYYMMDD') "
			+ " 					WHEN '일' "
			+ " 					THEN TO_DATE(#{startDate},'YYYYMMDD') - 6 "
			+ " 					ELSE TO_DATE(#{startDate},'YYYYMMDD') - (TO_CHAR(TO_DATE(#{startDate},'YYYYMMDD'), 'D')  - 2) "
			+ " 				END  + (LEVEL * 7) > TO_DATE(#{endDate},'YYYYMMDD') "
			+ " 			THEN TO_DATE(#{endDate},'YYYYMMDD') "
			+ " 			ELSE CASE TO_CHAR(TO_DATE(#{startDate},'YYYYMMDD'), 'DY') " 
			+ " 					WHEN '월' "
			+ " 					THEN TO_DATE(#{startDate},'YYYYMMDD') "
			+ " 					WHEN '일' "
			+ " 					THEN TO_DATE(#{startDate},'YYYYMMDD') - 6 "
			+ " 					ELSE TO_DATE(#{startDate},'YYYYMMDD') - (TO_CHAR(TO_DATE(#{startDate},'YYYYMMDD'), 'D')  - 2) "
			+ " 					END  + (LEVEL * 7) -1 "
			+ " 			END ENDDATE "
			+ "			,CASE TO_CHAR(TO_DATE(#{startDate},'YYYYMMDD'), 'DY') " 
			+ "				WHEN '월' "
			+ "				THEN TO_DATE(#{startDate},'YYYYMMDD') "
			+ "				WHEN '일' "
			+ "				THEN TO_DATE(#{startDate},'YYYYMMDD') - 6 "
			+ "				ELSE TO_DATE(#{startDate},'YYYYMMDD') - (TO_CHAR(TO_DATE(#{startDate},'YYYYMMDD'), 'D')  - 2) "
			+ "			END  + (LEVEL * 7 ) BILLINGDATE "
			+ "		FROM DUAL "
			+ "		WHERE 'BILC-0002' = (  SELECT B.BILLING_DURATION "
            + " 								FROM SUBMERCHANT_SERVICE_BILLING A"
            + "										,SUBMERCHANT_COMMISION B "
            + "								WHERE A.SERVICE_ID = #{serviceId} "
            + "									AND A.SERVICE_BILLING_ID=B.SERVICE_BILLING_ID"
            + "									AND B.BILLING_DT IS NOT NULL "
            + "                                 AND A.DEL_FLAG    = 'N' "                                       
			+ "							) "
			+ "		CONNECT BY LEVEL <= ((TO_DATE(#{endDate},'YYYYMMDD') - CASE WHEN TO_CHAR(TO_DATE(#{startDate},'YYYYMMDD') ,'DY') = '월' "
			+ "																	THEN TO_DATE(#{startDate},'YYYYMMDD') "
			+ "																	WHEN TO_CHAR(TO_DATE(#{startDate},'YYYYMMDD'), 'DY') = '일' "
			+ "																	THEN TO_DATE(#{startDate},'YYYYMMDD') - 6 "
			+ "																	ELSE TO_DATE(#{startDate},'YYYYMMDD') - (TO_CHAR(TO_DATE(#{startDate},'YYYYMMDD'), 'D')  - 2) "
			+ "																END "
			+ "							) / 7) + 1 "    
			+ "		/*보름 정산*/ "
			+ " 	UNION ALL "
			+ " 	SELECT TO_DATE(STARTDATE) STARTDATE " 
			+ "			,TO_DATE(ENDDATE) ENDDATE "
			+ "			,CASE TO_CHAR(TO_DATE(BILLINGDATE), 'DY') " 
			+ "				WHEN '토' "
			+ "				THEN TO_DATE(BILLINGDATE) + 2 "
			+ "				WHEN '일' "
			+ "				THEN TO_DATE(BILLINGDATE) + 1 "
			+ "				ELSE TO_DATE(BILLINGDATE) "
			+ "			END BILLINGDATE "
			+ "		FROM ( "
			+ "			SELECT CASE WHEN MOD(POWER(LEVEL,2) -1, 2) = 0 "
			+ "					THEN TO_CHAR(ADD_MONTHS(TO_DATE(#{startDate},'YYYYMMDD'), ROUND((LEVEL -1) / 2)) , 'YYYYMM') || DECODE(MOD(LEVEL,2) , 1, '01' , '16' ) "
			+ "					ELSE TO_CHAR(ADD_MONTHS(TO_DATE(#{startDate},'YYYYMMDD'), ROUND((LEVEL -1) / 2)) -1, 'YYYYMM') || DECODE(MOD(LEVEL,2) , 1, '01' , '16' ) " 
			+ "				END STARTDATE "
			+ "				, CASE WHEN MOD(POWER(LEVEL,2) -1, 2) = 0 "
			+ "					THEN TO_CHAR(ADD_MONTHS(TO_DATE(#{startDate},'YYYYMMDD'), ROUND((LEVEL -1) / 2)), 'YYYYMM') || '15' " 
			+ "					ELSE TO_CHAR(LAST_DAY(ADD_MONTHS(TO_DATE(#{startDate},'YYYYMMDD'),  ROUND((LEVEL -1) / 2)) -1), 'YYYYMMDD') "
			+ "				END ENDDATE "
			+ "				, CASE WHEN MOD(POWER(LEVEL,2) -1, 2) = 0 "
			+ "					THEN TO_CHAR(ADD_MONTHS(TO_DATE(#{startDate},'YYYYMMDD'), ROUND((LEVEL -1) / 2)) , 'YYYYMM') || '16' "
			+ "					ELSE TO_CHAR(ADD_MONTHS(TO_DATE(#{startDate},'YYYYMMDD'), ROUND((LEVEL -1) / 2)) , 'YYYYMMDD') "
			+ "				END BILLINGDATE "
			+ "			FROM DUAL "
			+ "			WHERE 'BILC-0003' = (  SELECT B.BILLING_DURATION "
            + " 								FROM SUBMERCHANT_SERVICE_BILLING A"
            + "										,SUBMERCHANT_COMMISION B "
            + "								WHERE A.SERVICE_ID = #{serviceId} "
            + "									AND A.SERVICE_BILLING_ID=B.SERVICE_BILLING_ID"
            + "									AND B.BILLING_DT IS NOT NULL "
            + "                                 AND A.DEL_FLAG    = 'N' "                                                      
			+ "								) "
			+ "			CONNECT BY LEVEL <= CEIL(MONTHS_BETWEEN(TO_DATE(TO_DATE(#{endDate},'YYYYMMDD')), TO_DATE(TO_DATE(#{startDate},'YYYYMMDD')))) * 2 "
			+ "		) "    
			+ "		/*월말 정산*/ "
			+ " 	UNION ALL "
			+ " 	SELECT STARTDATE "
			+ " 		,ENDDATE "
			+ " 		,CASE TO_CHAR(TO_DATE(BILLINGDATE), 'DY') " 
			+ " 			WHEN '토' "
			+ " 			THEN TO_DATE(BILLINGDATE) + 2 "
			+ " 			WHEN '일' "
			+ " 			THEN TO_DATE(BILLINGDATE) + 1 "
			+ " 			ELSE TO_DATE(BILLINGDATE) "
			+ " 		END BILLINGDATE "
			+ " 	FROM ( "
			+ " 		SELECT ADD_MONTHS(TO_DATE(#{startDate},'YYYYMMDD'), LEVEL -1) STARTDATE "
			+ " 			,LAST_DAY(ADD_MONTHS(TO_DATE(#{startDate},'YYYYMMDD'), LEVEL -1)) ENDDATE "
			+ " 			,LAST_DAY(ADD_MONTHS(TO_DATE(#{startDate},'YYYYMMDD'), LEVEL)) BILLINGDATE "
			+ " 		FROM DUAL "
			+ " 		WHERE 'BILC-0004' = ( SELECT B.BILLING_DURATION "
            + " 								FROM SUBMERCHANT_SERVICE_BILLING A"
            + "										,SUBMERCHANT_COMMISION B "
            + "								WHERE A.SERVICE_ID = #{serviceId} "
            + "									AND A.SERVICE_BILLING_ID=B.SERVICE_BILLING_ID"
            + "									AND B.BILLING_DT IS NOT NULL "
            + "                                 AND A.DEL_FLAG    = 'N' "
			+ " 							) "
			+ " 		CONNECT BY LEVEL <= CEIL(MONTHS_BETWEEN(TO_DATE(#{endDate},'YYYYMMDD'), TO_DATE(#{startDate},'YYYYMMDD'))) "
			+ " 	) "
			+ " ) ";
	@Select(GET_BILLING_CYCLES)
	public List<AgentBillingCycle> getBillingCycles(@Param(value="subMerchantId") String subMerchantId, 
			@Param(value="serviceId") String serviceId, @Param(value="startDate") String startDate, 
			@Param(value="endDate") String endDate);
	
	public static final String GET_MERCHANT = "SELECT " 
			+ " 	A.submerchant_id "
			+ " 	,A.erp_code "
			+ "		,A.depth "
			+ " 	,A.parent_id "
			+ " 	,C.name parentName "
			+ " 	,A.child_id "
			+ " 	,A.name "
			+ " 	,A.name_eng "
			+ " 	,A.alias "
			+ " 	,A.alias_eng "
			+ " 	,DECODE(A.use_flag ,'Y','사용','미사용') useFlagName "
			+ " 	,A.use_flag "
			+ " 	,A.reuse_flag "
			+ " 	,A.del_flag "
			+ " 	,A.pg_id "
			+ " 	,A.agent_id "
			+ " 	,B.biz_kind "
			+ " 	,B.biz_cond "
			+ " 	,B.corp_reg_no "
			+ " 	,B.biz_reg_no "
			+ " 	,B.cust_nm "
			+ " 	,FNC_TEL_NUMBER_TO_MASKING(B.cust_tel) cust_tel "
			+ " 	,B.ceo_nm "
			+ " 	,B.type "
			+ " 	,FNC_ADMIN_CODE_TO_NAME(B.type) biz_grp "
			+ " 	,B.bank_nm bankCd "
			+ " 	,FNC_ADMIN_CODE_TO_NAME(B.bank_nm) bankNm "
			+ " 	,B.bank_acc_no "
			+ " 	,B.bank_holder "
			+ " 	,B.zipcode "
			+ " 	,B.address "
			+ " 	,B.address_dtl "
			+ " 	,FNC_TEL_NUMBER_TO_MASKING(B.tel) tel "
			+ " 	,FNC_TEL_NUMBER_TO_MASKING(B.fax) fax "
			+ " 	,B.tax_cust_nm "
			+ " 	,B.tax_email "
			+ " 	,FNC_TEL_NUMBER_TO_MASKING(B.tax_tel) tax_tel "
			+ " 	,FNC_TEL_NUMBER_TO_MASKING(B.tax_phone) tax_phone "
			+ " 	,FNC_TEL_NUMBER_TO_MASKING(B.tax_fax) tax_fax "
			+ " 	,B.sales_nm "
			+ " 	,FNC_TEL_NUMBER_TO_MASKING(B.sales_tel) sales_tel "
			+ " 	,B.billing_nm "
			+ " 	,FNC_TEL_NUMBER_TO_MASKING(B.billing_tel) billing_tel "
			+ " 	,B.kpc_sales_nm "
			+ " 	,FNC_TEL_NUMBER_TO_MASKING(B.kpc_sales_tel) kpc_sales_tel "
			+ " 	,B.kpc_billing_nm "
			+ " 	,FNC_TEL_NUMBER_TO_MASKING(B.kpc_billing_tel) kpc_billing_tel "
			+ " FROM KPC_ADMIN.SUBMERCHANT A "
			+ " 	, KPC_ADMIN.SUBMERCHANT_DETAIL B "
			+ " 	, KPC_ADMIN.MERCHANT C "
			+ " WHERE A.del_flag = 'N' "
			+ " 	AND A.submerchant_id = B.submerchant_id "
			+ " 	AND A.parent_id      = C.merchant_id "
			+ " 	AND A.submerchant_id = #{subMerchantId} ";
	@Select(GET_MERCHANT)
	public AgentMerchant getMerchant(@Param(value="subMerchantId") String subMerchantId);
	
	public static final String GET_BILLING = "SELECT D.service_billing_id "
			+ "		,D.service_id "
			+ "		,D.name "
			+ "		,D.code "
			+ "		,FNC_ADMIN_CODE_TO_NAME(D.code) codeName "
			+ "		,D.divider "
			+ "		,FNC_ADMIN_CODE_TO_NAME(D.divider) dividerName "
			+ "		,FNC_ADMIN_CODE_TO_NAME(D.bank_nm) bankNm "
			+ "		,D.bank_nm bankCd "
			+ "		,SUBSTR(D.bank_acc_no, 0 , LENGTH(D.bank_acc_no) - 5) || '*****' bank_acc_no "
			+ "		,D.vr_bank_nm "
			+ "		,SUBSTR(D.vr_bank_acc_no, 0 , LENGTH(D.vr_bank_acc_no) - 5) || '*****' vr_bank_acc_no "
			+ "		,D.bank_holder "
			+ "		,D.billing_dt "
			+ "		,D.billing_duration "
			+ "		,FNC_ADMIN_CODE_TO_NAME(D.billing_duration) billingDurationName "
			+ "		,D.merchant_comm_type "
			+ "		,FNC_ADMIN_CODE_TO_NAME(D.merchant_comm_type) merchantCommTypeName "
			+ "		,NVL(RTRIM(TO_CHAR(D.merchant_commision,'FM9999999999990.99'),'.'),0) merchant_commision "
			+ "		,D.merchant_tax_type "
			+ "		,FNC_ADMIN_CODE_TO_NAME(D.merchant_tax_type) merchantTaxTypeName "
			+ "		,D.merchant_tax "
			+ "		,D.mng_nm "
			+ "		,FNC_TEL_NUMBER_TO_MASKING(D.mng_tel) mng_tel "
			+ "		,D.mng_email "
			+ "		,d.kpc_mng_nm "
			+ "		,FNC_TEL_NUMBER_TO_MASKING(d.kpc_mng_tel) kpc_mng_tel "
			+ "		,d.kpc_mng_email "
			+ "		,D.create_dt "
			+ "		,E.apl_end_dt "
			+ "		,RTRIM(TO_CHAR(E.merchant_commision,'FM9999999999990.99'),'.') expectedMerchantCommision "
			+ "	FROM KPC_ADMIN.SUBMERCHANT A "
			+ "		, KPC_ADMIN.SUBMERCHANT_DETAIL B "
			+ "		, KPC_ADMIN.SUBMERCHANT_SERVICE C "
			+ "		, KPC_ADMIN.SUBMERCHANT_SERVICE_BILLING D "
			+ "		, ( "
			+ "			SELECT * "
			+ "			FROM ( "
			+ "				SELECT B.hst_seq "
			+ "					,B.apl_end_dt "
			+ "					,B.service_billing_id "
			+ "					,B.merchant_commision "
			+ "				FROM KPC_ADMIN.SUBMERCHANT_SERVICE_BILLING A "
			+ "					,SUBMERCHANT_SVC_BILLING_HST B "
			+ "				WHERE A.service_billing_id = B.service_billing_id "
			+ "					AND A.SERVICE_BILLING_ID = #{billingId} "
			+ "					AND B.apl_end_dt >= TO_CHAR(SYSDATE , 'YYYYMMDD') "
			+ "				ORDER BY B.hst_seq DESC , B.apl_end_dt DESC "
			+ "			) "
			+ "			WHERE ROWNUM = 1 "
			+ "		) E "
			+ "	WHERE A.submerchant_id = B.submerchant_id "
			+ "		AND A.submerchant_id = C.submerchant_id "
			+ "		AND C.service_id = D.service_id "
			+ "		AND D.service_billing_id = E.service_billing_id(+) "
			+ "		AND A.submerchant_id = #{subMerchantId} "
			+ "		AND A.del_flag = 'N' "
			+ "		AND C.del_flag = 'N' "
			+ "		AND D.del_flag = 'N' "
			+ "		AND D.SERVICE_BILLING_ID = #{billingId} ";
	@Select(GET_BILLING)
	public AgentBillings getBilling(@Param(value="subMerchantId") String subMerchantId, @Param(value="billingId") String billingId);
}
